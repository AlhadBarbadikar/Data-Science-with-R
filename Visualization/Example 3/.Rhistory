barplot(matrix(rnorm(9), 3, 3), beside=T)
barplot(abs(matrix(rnorm(9)), 3, 3), beside=T)
barplot(matrix(abs(rnorm(9)), 3, 3), beside=T)
temp=matrix(abs(rnorm(9))
)
colnames(temp)=c("met 1", "met 2", "met 3")
temp=data.frame(temp)
colnames(temp)=c("met 1", "met 2", "met 3")
temp
temp=matrix(abs(rnorm(9), 3, 3)
temp=matrix(abs(rnorm(9)), 3, 3)
temp=matrix(abs(rnorm(9)), 3, 3)
colnames(temp)=c("met 1", "met 2", "met 3")
rownames(temp)=c("dat 1", "dat 2", "dat 3")
barplot(temp, beside=T)
barplot(temp, beside=T, legend=T)
?barplot
barplot(temp, beside=T, legend=T, args.legend=list(x=0, y=0.2))
barplot(temp, beside=T, legend=T, args.legend=list(x=2, y=2))
barplot(temp, beside=T, legend=T, args.legend=list(x=5, y=2))
barplot(temp, beside=T, legend=T, args.legend=list(x=3.5, y=3))
barplot(temp, beside=T, legend=T, args.legend=list(x=3.8, y=2.7))
x=rnorm(10)
y=rnorm(10)
y=sort(y)
plot(x, type="l")
lines(y, type="l", col=2)
points(y-x, type="h", col=3)
abline(h=0, lty=2)
par(mfrow=c(2,1))
plot(x, type="l")
lines(y, type="l", col=2)
plot(y-x, type="h", col=3)
abline(h=0, lty=2)
par(mfrow=c(1,1))
plot(1:10, 1:10, pch=16, cex=2, col=gray(seq(0.1,1,0.1)))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(1,seq(0.1,1,0.1), 0.5))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(1,seq(0.1,1,0.1), 1))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(1,seq(0.1,1,0.1), seq(1,0.1, 0.1)))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(1,seq(0.1,1,0.1), seq(1,0.1, -0.1)))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(seq(0.1, 1, 0.1),seq(0.1,1,0.1), seq(1,0.1, -0.1)))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(seq(0.1, 1, 0.1),0.5, seq(1,0.1, -0.1)))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(seq(0.1, 1, 0.1),1, seq(1,0.1, -0.1)))
plot(1:10, 1:10, pch=16, cex=2, col=rgb(seq(0.1, 1, 0.1),0, seq(1,0.1, -0.1)))
hz.eto.data=read.csv(file.choose())
hz.ir.data=read.csv(file.choose())
hz.mit.data=read.csv(file.choose())
#etoposide
#IR
#mitomychi
hz.eto.data.v=data.frame(
cbind(unlist(hz.eto.data[,-1]),
rep(c(0,2,4,6,8,16,24), each=9),
rep(c("WT", "WT", "WT",
"HET", "HET", "HET",
"KO", "KO", "KO"), 7)))
hz.ir.data.v=data.frame(
cbind(unlist(hz.ir.data[,-1]),
rep(c(0,0.5,1,1.5,2,4,6,8), each=6),
rep(c("WT", "WT", "WT",
"KO", "KO", "KO"), 8)))
hz.mit.data.v=data.frame(
cbind(unlist(hz.mit.data[,-1]),
rep(c(0,2,4,6,8,16), each=6),
rep(c("WT", "WT", "WT",
"KO", "KO", "KO"), 6)))
colnames(hz.eto.data.v)=c("measure", "time", "group")
colnames(hz.ir.data.v)=c("measure", "time", "group")
colnames(hz.mit.data.v)=c("measure", "time", "group")
source('~/Dropbox/Tian_consulting/Gelmann/Hailan/hzdata_set2_IR.R')
save.image("~/Dropbox/Tian_consulting/Gelmann/Hailan/08082015.RData")
xx=matrix(rnorm(20000), 50, 400)
out.mat=outer(xx, xx, function(x,y){mean(x+y)})
xx=matrix(rnorm(2000), 50, 40)
out.mat=outer(xx, xx, FUN=function(x,y){mean(x+y)})
out.mat=outer(xx, t(xx), FUN=function(x,y){mean(x+y)})
out.mat=outer(xx, xx, FUN=Vectorize(function(x,y){mean(x+y)}))
dim(out.mat)
rm(out.mat)
abstracts.tz=read.table(file.choose(), sep="\n")
head(abstracts.tz)
head(substr(abstracts.tz, 1, 9))
head(substrings(abstracts.tz, 1, 9))
head(substrins(abstracts.tz, 1, 9))
head(substring(abstracts.tz, 1, 9))
head(substring(as.character(abstracts.tz), 1, 9))
?substr
as.characters(abstracts.tz)
as.character(abstracts.tz)
abstracts.tz[1]
abstracts.tz[1,]
abstracts.tz[2,]
abstracts.tz[3,]
abstracts.tz[,1]
dim(abstracts.t)
dim(abstracts.tz)
abstracts.tz=read.table(file.choose(), sep=":")
abstracts.tz=read.table(file.choose())
abstracts.tz=read.table(file.choose(), sep="\t")
dim(abstracts.tz)
library(utils)
papers.tz=readCitationFile(file.choose())
install.packages("bibtex")
library(bibtex)
papers.tz=read.bib(file.choose())
head(papers.tz)
dim(papers.tz)
papers.tz
?read.bib
warnings()
source('~/.active-rstudio-document', echo=TRUE)
plot_polished
source('~/.active-rstudio-document', echo=TRUE)
table(Minard.troops[,4])
table(Minard.troops[,5])
Minard.troops.list=list(1:6)
tracks=NULL
tracks$direction=rep(c("A", "R"), 3)
tracks$rt=rep(1:3, each=2)
for(i in 1:6){
Minard.troops.list[[i]]=Minard.troops[(Minard.troops[,4]==tracks$direction[i])&(Minard.troops[,5]==tracks$rt[i]),1:3]
}
Minard.troops.list[[1]]
Minard.troops.list[[2]]
Minard.troops.list[[3]]
Minard.troops.list[[4]]
Minard.troops.list[[5]]
Minard.troops.list[[6]]
require(RColorBrewer)
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
destfile = "MyTile1.png")
require(RGoogleMaps)
require(RgoogleMaps)
Minard.troops.list=list(1:6)
tracks=NULL
tracks$direction=rep(c("A", "R"), each=3)
tracks$rt=rep(1:3, 2)
for(i in 1:6){
Minard.troops.list[[i]]=Minard.troops[(Minard.troops[,4]==tracks$direction[i])&(Minard.troops[,5]==tracks$rt[i]),1:3]
Minard.troops.list[[i]]$up=Minard.troops$lat+
Minard.troops$survivors/100000
Minard.troops.list[[i]]$lo=Minard.troops$lat-
Minard.troops$survivors/100000
Minard.troops.list[[i]]$size=Minard.troops$survivors/100000
}
tracks
Minard.troops.list=list(1:6)
tracks=NULL
tracks$direction=rep(c("A", "R"), each=3)
tracks$rt=rep(1:3, 2)
for(i in 1:6){
Minard.troops.list[[i]]=Minard.troops[(Minard.troops[,4]==tracks$direction[i])&(Minard.troops[,5]==tracks$rt[i]),1:3]
Minard.troops.list[[i]]$up=Minard.troops$lat+
Minard.troops$survivors/100000
Minard.troops.list[[i]]$lo=Minard.troops$lat-
Minard.troops$survivors/100000
Minard.troops.list[[i]]$size=Minard.troops$survivors/100000
}
Minard.troops.list
i
Minard.troops.list=list(1:6)
tracks=NULL
tracks$direction=rep(c("A", "R"), each=3)
tracks$rt=rep(1:3, 2)
for(i in 1:6){
Minard.troops.list[[i]]=Minard.troops[(Minard.troops[,4]==tracks$direction[i])&(Minard.troops[,5]==tracks$rt[i]),1:3]
Minard.troops.list[[i]]$up=Minard.troops.list[[i]]$lat+
Minard.troops.list[[i]]$survivors/100000
Minard.troops.list[[i]]$lo=Minard.troops.list[[i]]$lat-
Minard.troops.list[[i]]$survivors/100000
Minard.troops.list[[i]]$size=Minard.troops.list[[i]]$survivors/100000
}
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
destfile = "MyTile1.png")
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
col = col.use[i])
}
col.use
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
col = col.use[i])
}
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
lwd=3,
col = col.use[i])
}
?arrow
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.1, "npc"),
lwd=3,
col = col.use[i])
}
require(grid)
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.1, "npc"),
lwd=3,
col = col.use[i])
}
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.02, "npc"),
lwd=3,
col = col.use[i])
}
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
size=c(640, 300),
destfile = "MyTile1.png")
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.02, "npc"),
lwd=3,
col = col.use[i])
}
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
size=c(640, 300),
GRAYSCALE=TRUE,
destfile = "MyTile1.png")
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.02, "npc"),
lwd=3,
col = col.use[i])
}
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.02, "npc"),
lwd=3,
col = col.use[i])
}
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.1, "npc"),
lwd=4,
col = col.use[i])
}
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
size=c(640, 300),
GRAYSCALE=TRUE,
destfile = "MyTile1.png")
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.1, "npc"),
lwd=4,
col = col.use[i])
}
plot.new()
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
size=c(640, 300),
GRAYSCALE=TRUE,
destfile = "MyTile1.png")
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=TRUE,
length=unit(0.1, "npc"),
lwd=4,
col = col.use[i])
}
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
add.ind=FALSE
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=add.ind,
length=unit(0.1, "npc"),
lwd=4,
col = col.use[i])
if(i == 1) {add.ind=TRUE}
}
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
add.ind=TRUE
if(i == 1) {add.ind=FALSE}
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=add.ind,
length=unit(0.1, "npc"),
lwd=4,
col = col.use[i])
}
dim(Minard.troops.list[[1]])
Srs=list(1:6)
for(i in 1:6){
Sr1 = Polygon(Minard.troops.list[[i]][,4:5])
Srs[[i]] = Polygons(list(Sr1), paste("s", i, sep=""))
}
SpP = SpatialPolygons(Srs, 1:6)
}
Srs=list(1:6)
for(i in 1:6){
Sr1 = Polygon(Minard.troops.list[[i]][,4:5])
Srs[[i]] = Polygons(list(Sr1), paste("s", i, sep=""))
}
SpP = SpatialPolygons(Srs, 1:6)
PlotPolysOnStaticMap(MyMap, SpP,
lwd=2,
col = Col(col.use, alpha=0.3),
add = T)
SpP
?reverse
??reverse
Srs=list(1:6)
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
xx=c(Minard.troops.list[[i]][,1], Minard.troops.list[[i]][rt.len:1,1])
yy=c(Minard.troops.list[[i]][,4], Minard.troops.list[[i]][rt.len:1,5])
Sr1 = Polygon(cbind(xx, yy))
Srs[[i]] = Polygons(list(Sr1), paste("s", i, sep=""))
}
SpP = SpatialPolygons(Srs, 1:6)
PlotPolysOnStaticMap(MyMap, SpP,
lwd=2,
col = Col(col.use, alpha=0.3),
add = T)
Srs=list(1:6)
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
xx=c(Minard.troops.list[[i]][,1], Minard.troops.list[[i]][rt.len:1,1])
yy=c(Minard.troops.list[[i]][,4], Minard.troops.list[[i]][rt.len:1,5])
Sr1 = Polygon(cbind(xx, yy))
Srs[[i]] = Polygons(list(Sr1), paste("s", i, sep=""))
}
SpP = SpatialPolygons(Srs, 1:6)
PlotPolysOnStaticMap(MyMap, SpP,
lwd=2,
col = col.use,
add = T)
Minard.troops.list=list(1:6)
tracks=NULL
tracks$direction=rep(c("A", "R"), each=3)
tracks$rt=rep(1:3, 2)
for(i in 1:6){
Minard.troops.list[[i]]=Minard.troops[(Minard.troops[,4]==tracks$direction[i])&(Minard.troops[,5]==tracks$rt[i]),1:3]
Minard.troops.list[[i]]$up=Minard.troops.list[[i]]$lat+
Minard.troops.list[[i]]$survivors/500000
Minard.troops.list[[i]]$lo=Minard.troops.list[[i]]$lat-
Minard.troops.list[[i]]$survivors/500000
Minard.troops.list[[i]]$size=Minard.troops.list[[i]]$survivors/500000
}
lat=Minard.troops$lat
lon=Minard.troops$lon
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)))
MyMap <- GetMap(center=center, zoom=zoom,
size=c(640, 300),
GRAYSCALE=TRUE,
destfile = "MyTile1.png")
col.use=c(brewer.pal(3, "Set2"), brewer.pal(3, "Pastel2"))
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
add.ind=TRUE
if(i == 1) {add.ind=FALSE}
PlotArrowsOnStaticMap(MyMap,
lat0=Minard.troops.list[[i]]$lat[-rt.len],
lon0=Minard.troops.list[[i]]$long[-rt.len],
lat1=Minard.troops.list[[i]]$lat[-1],
lon1=Minard.troops.list[[i]]$long[-1],
add=add.ind,
length=unit(0.1, "npc"),
lwd=4,
col = col.use[i])
}
Srs=list(1:6)
for(i in 1:6){
rt.len=nrow(Minard.troops.list[[i]])
xx=c(Minard.troops.list[[i]][,1], Minard.troops.list[[i]][rt.len:1,1])
yy=c(Minard.troops.list[[i]][,4], Minard.troops.list[[i]][rt.len:1,5])
Sr1 = Polygon(cbind(xx, yy))
Srs[[i]] = Polygons(list(Sr1), paste("s", i, sep=""))
}
SpP = SpatialPolygons(Srs, 1:6)
PlotPolysOnStaticMap(MyMap, SpP,
lwd=2,
col = col.use,
add = T)
require(lava)
Col(col.use, alpha=0.2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/Data-Science-with-R/Visualization/Example 3")
source('~/.active-rstudio-document', echo=TRUE)
par(mfrow=c(2,1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
