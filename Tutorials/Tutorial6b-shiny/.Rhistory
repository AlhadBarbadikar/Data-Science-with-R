zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=250, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.6, 1.4,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
library(gbm)
library(shiny)
shinyApp(
ui= fluidPage(
headerPanel('Gradient boosting machine'),
sidebarPanel(
sliderInput("theta", label = "Persp: theta",
min = -180, max = 180, value = 0, step = 5),
sliderInput("phi", label = "Persp: phi",
min = -90, max = 90, value = 0, step = 5),
fluidRow(
column(4, selectInput('interact', 'Interaction', c(1,2,3),
selected=1)),
column(8, sliderInput("shrinkage", label = "Shrinkage",
min = 0.001, max = 1, value = 0.011,
step = 0.05))),
fluidRow(
column(6, sliderInput("ntree", label = "Number of trees",
min = 50, max = 3000, value = 1000, step = 50)),
column(6, sliderInput("showstep", label = "Show step k",
min = 1, max = 3000, value = 2, step = 1)))
),
mainPanel(
fluidRow(column(12, plotOutput('GBMfit', height=550))),
fluidRow(column(12, plotOutput('errorcurve', height=250)))
)
),
server=function(input, output) {
load("spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
output$GBMfit=renderPlot(height=550, {
# fitting the model
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
# visualize the fitted model
x1=seq(min(spamdata$logChar4, na.rm=T),
max(spamdata$logChar4, na.rm=T), 0.25)
x2=seq(min(spamdata$logcapsum, na.rm=T),
max(spamdata$logcapsum, na.rm=T), 0.25)
zz.input=expand.grid(x1, x2)
colnames(zz.input)=c("logChar4", "logcapsum")
zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=250, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.05, 0.2,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
library(gbm)
library(shiny)
shinyApp(
ui= fluidPage(
headerPanel('Gradient boosting machine'),
sidebarPanel(
sliderInput("theta", label = "Persp: theta",
min = -180, max = 180, value = 0, step = 5),
sliderInput("phi", label = "Persp: phi",
min = -90, max = 90, value = 0, step = 5),
fluidRow(
column(4, selectInput('interact', 'Interaction', c(1,2,3),
selected=1)),
column(8, sliderInput("shrinkage", label = "Shrinkage",
min = 0.001, max = 1, value = 0.011,
step = 0.05))),
fluidRow(
column(6, sliderInput("ntree", label = "Number of trees",
min = 50, max = 3000, value = 1000, step = 50)),
column(6, sliderInput("showstep", label = "Show step k",
min = 1, max = 3000, value = 2, step = 1)))
),
mainPanel(
fluidRow(column(12, plotOutput('GBMfit', height=550))),
fluidRow(column(12, plotOutput('errorcurve', height=250)))
)
),
server=function(input, output) {
load("spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
output$GBMfit=renderPlot(height=550, {
# fitting the model
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
# visualize the fitted model
x1=seq(min(spamdata$logChar4, na.rm=T),
max(spamdata$logChar4, na.rm=T), 0.25)
x2=seq(min(spamdata$logcapsum, na.rm=T),
max(spamdata$logcapsum, na.rm=T), 0.25)
zz.input=expand.grid(x1, x2)
colnames(zz.input)=c("logChar4", "logcapsum")
zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=250, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.05, 0.5,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial6-shiny')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(length(v)-1)){
j=1
len.sort=length(v.sort)
while(v[i]>=v.sort[j]) {j=j+1}
v.sort=c(v.sort[1:(j-1)], v[i], v.sort[j:len.sort])
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7,1))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while(v[i]>v.sort[j]) {j=j+1}
v.sort=c(v.sort[1:(j-1)], v[i], v.sort[j:len.sort])
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7,1))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=n)) {j=j+1}
v.sort=c(v.sort[1:(j-1)], v[i], v.sort[j:len.sort])
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7,1))
f.insertsort(c(1,5,2,3,4,7))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=n)) {j=j+1}
v.sort=c(v.sort[1:(j-1)], v[i], v.sort[j:len.sort])
print(v.sort)
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=n)) {j=j+1}
v.temp=NULL
if(j>1) v.temp=c(v.temp, v.sort[1:(j-1)])
v.temp=c(v.temp, v[i])
if(j<=len.sort) v.temp=c(v.temp, v.sort[j:len.sort])}
print(v.sort)
}
return(v.sort)
}
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=n)) {j=j+1}
v.temp=NULL
if(j>1) v.temp=c(v.temp, v.sort[1:(j-1)])
v.temp=c(v.temp, v[i])
if(j<=len.sort) v.temp=c(v.temp, v.sort[j:len.sort])
print(v.sort)
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=n)) {j=j+1}
v.temp=NULL
if(j>1) v.temp=c(v.temp, v.sort[1:(j-1)])
v.temp=c(v.temp, v[i])
if(j<=len.sort) v.temp=c(v.temp, v.sort[j:len.sort])
v.sort=v.temp
print(v.sort)
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7))
f.insertsort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6,31))
f.insertsort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=len.sort)) {j=j+1}
v.temp=NULL
if(j>1) v.temp=c(v.temp, v.sort[1:(j-1)])
v.temp=c(v.temp, v[i])
if(j<=len.sort) v.temp=c(v.temp, v.sort[j:len.sort])
v.sort=v.temp
print(v.sort)
}
return(v.sort)
}
f.insertsort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6))
system.time(
f.insertsort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6)))
f.partition=function(v, pivot){
v.left=NULL
v.right=NULL
for(i in 1:length(v)){
if(v[i]<=pivot){
v.left=c(v.left, v[i])
}
else{
v.right=c(v.right, v[i])
}
}
return(list(lo=v.left, hi=v.right))
}
f.quicksort=function(v, len.direct=5){
if(length(v)<=len.direct){
v.sort=f.insertsort(v)
}
else{
pivot=v[1]
v.part=f.partition(v[-1], pivot)
v.left.sort=f.quicksort(v.part$lo)
v.right.sort=f.quicksort(v.part$hi)
v.sort=c(v.left.sort, v[1], v.right.sort)
}
return(v.sort)
}
f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6)))
f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6))
f.quicksort=function(v, len.direct=5){
if(length(v)<=len.direct){
v.sort=f.insertsort(v)
}
else{
pivot=v[1]
v.part=f.partition(v[-1], pivot)
v.left.sort=f.quicksort(v.part$lo)
v.right.sort=f.quicksort(v.part$hi)
v.sort=c(v.left.sort, v[1], v.right.sort)
}
print(v.sort)
return(v.sort)
}
f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6))
f.insertsort(c(1,1))
f.partition(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6), 5)
f.quicksort=function(v, len.direct=5){
if(length(v)<=len.direct){
v.sort=f.insertsort(v)
}
else{
pivot=v[1]
v.part=f.partition(v[-1], pivot)
print(v.part)
v.left.sort=f.quicksort(v.part$lo)
print(v.left.sort)
v.right.sort=f.quicksort(v.part$hi)
print(v.right.sort)
v.sort=c(v.left.sort, v[1], v.right.sort)
}
print(v.sort)
return(v.sort)
}
f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6))
f.quicksort=function(v, len.direct=5){
if(length(v)<2){
v.sort=v
}
else{
if(length(v)<=len.direct){
v.sort=f.insertsort(v)
}
else{
pivot=v[1]
v.part=f.partition(v[-1], pivot)
v.left.sort=f.quicksort(v.part$lo)
v.right.sort=f.quicksort(v.part$hi)
v.sort=c(v.left.sort, v[1], v.right.sort)
}
}
return(v.sort)
}
f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6))
system.time(f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6)))
setwd("~/GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial6b-shiny")
ozonedata=read.csv(file="data/ozone.csv")
head(ozonedata)
names(ozonedata)[4]="ozone"
head(ozonedata)
pm25data=read.csv(file="data/pm25.csv")
head(pm25data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=len.sort)) {j=j+1}
v.temp=NULL
if(j>1) v.temp=c(v.temp, v.sort[1:(j-1)])
v.temp=c(v.temp, v[i])
if(j<=len.sort) v.temp=c(v.temp, v.sort[j:len.sort])
v.sort=v.temp
#print(v.sort)
}
return(v.sort)
}
system.time(f.insertsort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6)))
system.time(f.insertsort(rnorm(200)))
system.time(f.insertsort(rnorm(20)))
system.time(f.insertsort(rnorm(2000)))
system.time(sort(rnorm(2000)))
system.time(sort(rnorm(2000000)))
system.time(sort(rnorm(200000)))
system.time(sort(rnorm(20000)))
f.insertsort=function(v){
n=length(v)
v.sort=v[n]
for(i in 1:(n-1)){
j=1
len.sort=length(v.sort)
while((v[i]>v.sort[j])&(j<=len.sort)) {j=j+1}
v.temp=NULL
if(j>1) v.temp=c(v.temp, v.sort[1:(j-1)])
v.temp=c(v.temp, v[i])
if(j<=len.sort) v.temp=c(v.temp, v.sort[j:len.sort])
v.sort=v.temp
#print(v.sort)
}
return(v.sort)
}
f.partition=function(v, pivot){
v.left=NULL
v.right=NULL
for(i in 1:length(v)){
if(v[i]<=pivot){
v.left=c(v.left, v[i])
}
else{
v.right=c(v.right, v[i])
}
}
return(list(lo=v.left, hi=v.right))
}
f.quicksort=function(v, len.direct=5){
if(length(v)<2){
v.sort=v
}
else{
if(length(v)<=len.direct){
v.sort=f.insertsort(v)
}
else{
pivot=v[1]
v.part=f.partition(v[-1], pivot)
v.left.sort=f.quicksort(v.part$lo)
v.right.sort=f.quicksort(v.part$hi)
v.sort=c(v.left.sort, v[1], v.right.sort)
}
}
return(v.sort)
}
system.time(f.quicksort(c(1,5,2,3,4,7, 2,3, 1,2, 3, 2,3,8,6,4,6)))
system.time(f.quicksort(rnorm(100)))
system.time(f.insertsort(rnorm(100)))
system.time(f.quicksort(rnorm(1000)))
system.time(f.insertsort(rnorm(1000)))
system.time(f.insertsort(rnorm(3000)))
system.time(f.quicksort(rnorm(3000)))
run.insert=rep(0,10)
run.quick=rep(0,10)
for(i in 1:10){
print(c(i, date()))
run.insert[i]=system.time(f.insertsort(rnorm(2^i)))
run.quick[i]=system.time(f.quicksort(rnorm(2^i)))
}
run.insert
run.quick
run.insert=rep(0,12)
run.quick=rep(0,12)
for(i in 1:12){
print(c(i, date()))
run.insert[i]=system.time(f.insertsort(rnorm(2^i)))
run.quick[i]=system.time(f.quicksort(rnorm(2^i)))
}
run.insert
run.quick
plot(2^(1:13), run.insert)
plot(2^(1:12), run.insert)
plot(2^(1:12), run.insert)
points(2^(1:12), run.quick)
