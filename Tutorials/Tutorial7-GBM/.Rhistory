min = 0.001, max = 1, value = 0.011,
step = 0.05))),
fluidRow(
column(6, sliderInput("ntree", label = "Number of trees",
min = 50, max = 3000, value = 1000, step = 50)),
column(6, sliderInput("showstep", label = "Show step k",
min = 1, max = 3000, value = 2, step = 1)))
),
mainPanel(
fluidRow(column(12, plotOutput('GBMfit', height=400))),
fluidRow(column(12, plotOutput('errorcurve', height=300)))
)
),
server=function(input, output) {
load("spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
output$GBMfit=renderPlot(height=400, {
# fitting the model
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
# visualize the fitted model
x1=seq(min(spamdata$logChar4, na.rm=T),
max(spamdata$logChar4, na.rm=T), 0.25)
x2=seq(min(spamdata$logcapsum, na.rm=T),
max(spamdata$logcapsum, na.rm=T), 0.25)
zz.input=expand.grid(x1, x2)
colnames(zz.input)=c("logChar4", "logcapsum")
zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=300, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.6, 1.4,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
library(gbm)
library(shiny)
shinyApp(
ui= fluidPage(
headerPanel('Gradient boosting machine'),
sidebarPanel(
sliderInput("theta", label = "Persp: theta",
min = -180, max = 180, value = 0, step = 5),
sliderInput("phi", label = "Persp: phi",
min = -90, max = 90, value = 0, step = 5),
fluidRow(
column(4, selectInput('interact', 'Interaction', c(1,2,3),
selected=1)),
column(8, sliderInput("shrinkage", label = "Shrinkage",
min = 0.001, max = 1, value = 0.011,
step = 0.05))),
fluidRow(
column(6, sliderInput("ntree", label = "Number of trees",
min = 50, max = 3000, value = 1000, step = 50)),
column(6, sliderInput("showstep", label = "Show step k",
min = 1, max = 3000, value = 2, step = 1)))
),
mainPanel(
fluidRow(column(12, plotOutput('GBMfit', height=550))),
fluidRow(column(12, plotOutput('errorcurve', height=250)))
)
),
server=function(input, output) {
load("spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
output$GBMfit=renderPlot(height=550, {
# fitting the model
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
# visualize the fitted model
x1=seq(min(spamdata$logChar4, na.rm=T),
max(spamdata$logChar4, na.rm=T), 0.25)
x2=seq(min(spamdata$logcapsum, na.rm=T),
max(spamdata$logcapsum, na.rm=T), 0.25)
zz.input=expand.grid(x1, x2)
colnames(zz.input)=c("logChar4", "logcapsum")
zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=250, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.6, 1.4,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
library(gbm)
library(shiny)
shinyApp(
ui= fluidPage(
headerPanel('Gradient boosting machine'),
sidebarPanel(
sliderInput("theta", label = "Persp: theta",
min = -180, max = 180, value = 0, step = 5),
sliderInput("phi", label = "Persp: phi",
min = -90, max = 90, value = 0, step = 5),
fluidRow(
column(4, selectInput('interact', 'Interaction', c(1,2,3),
selected=1)),
column(8, sliderInput("shrinkage", label = "Shrinkage",
min = 0.001, max = 1, value = 0.011,
step = 0.05))),
fluidRow(
column(6, sliderInput("ntree", label = "Number of trees",
min = 50, max = 3000, value = 1000, step = 50)),
column(6, sliderInput("showstep", label = "Show step k",
min = 1, max = 3000, value = 2, step = 1)))
),
mainPanel(
fluidRow(column(12, plotOutput('GBMfit', height=550))),
fluidRow(column(12, plotOutput('errorcurve', height=250)))
)
),
server=function(input, output) {
load("spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
output$GBMfit=renderPlot(height=550, {
# fitting the model
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
# visualize the fitted model
x1=seq(min(spamdata$logChar4, na.rm=T),
max(spamdata$logChar4, na.rm=T), 0.25)
x2=seq(min(spamdata$logcapsum, na.rm=T),
max(spamdata$logcapsum, na.rm=T), 0.25)
zz.input=expand.grid(x1, x2)
colnames(zz.input)=c("logChar4", "logcapsum")
zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=250, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.05, 0.2,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
library(gbm)
library(shiny)
shinyApp(
ui= fluidPage(
headerPanel('Gradient boosting machine'),
sidebarPanel(
sliderInput("theta", label = "Persp: theta",
min = -180, max = 180, value = 0, step = 5),
sliderInput("phi", label = "Persp: phi",
min = -90, max = 90, value = 0, step = 5),
fluidRow(
column(4, selectInput('interact', 'Interaction', c(1,2,3),
selected=1)),
column(8, sliderInput("shrinkage", label = "Shrinkage",
min = 0.001, max = 1, value = 0.011,
step = 0.05))),
fluidRow(
column(6, sliderInput("ntree", label = "Number of trees",
min = 50, max = 3000, value = 1000, step = 50)),
column(6, sliderInput("showstep", label = "Show step k",
min = 1, max = 3000, value = 2, step = 1)))
),
mainPanel(
fluidRow(column(12, plotOutput('GBMfit', height=550))),
fluidRow(column(12, plotOutput('errorcurve', height=250)))
)
),
server=function(input, output) {
load("spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
output$GBMfit=renderPlot(height=550, {
# fitting the model
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
# visualize the fitted model
x1=seq(min(spamdata$logChar4, na.rm=T),
max(spamdata$logChar4, na.rm=T), 0.25)
x2=seq(min(spamdata$logcapsum, na.rm=T),
max(spamdata$logcapsum, na.rm=T), 0.25)
zz.input=expand.grid(x1, x2)
colnames(zz.input)=c("logChar4", "logcapsum")
zz.output.1=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=T)
zz.output.all=predict.gbm(gbm.model1, zz.input,
n.trees=input$showstep, single.tree=F)
zz.mat1=matrix(zz.output.1, length(x1), length(x2), byrow=F)
zz.mat2=matrix(zz.output.all, length(x1), length(x2), byrow=F)
par(mfrow=c(1,2))
persp(x1, x2, zz.mat1,
main=paste("one tree at step", input$showstep),
col="lightblue",
phi=input$phi, theta=input$theta)
persp(x1, x2, zz.mat2,
main=paste("all trees at step", input$showstep),
col="lightsalmon",
phi=input$phi, theta=input$theta)
})
output$errorcurve=renderPlot(height=250, {
gbm.model1=gbm(spam~logChar4+logcapsum, data=spamdata,
train.fraction=0.8,
n.trees=input$ntree,
shrinkage = input$shrinkage,
interaction.depth=input$interact)
par(mar = c(4, 4, 2, .1), font.main=1)
plot(c(1, input$ntree), c(0,1.5),
type="n", xlab="trees", ylab="error rate",
main="Loss fucntions")
lines(gbm.model1$train.error, col=1, lty=2, lwd=1.5)
lines(gbm.model1$valid.error, col=1, lty=1, lwd=2)
legend(input$ntree*0.05, 0.5,
c("training loss", "validation loss"),
lty=2:1)
})
}
)
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial6-shiny')
knit_with_parameters('~/GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM/gbm_demo.Rmd')
shiny::runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
install.packages("hexbin")
shiny::runApp('GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM')
load("data/spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
setwd("~/GitHub/TZstatsADS/Data-Science-with-R/Tutorials/Tutorial7-GBM")
load("data/spam.RData")
spamdata.train$logChar4=log(spamdata.train$char4+0.01)
spamdata.train$logcapsum=log(spamdata.train$cap.run.sum+0.01)
spamdata=spamdata.train
hexbinplot(logChar4~logcapsum, data=spamdata,
xlab="Log char4",
ylab="Log cap sum", colramp=rf)
hexbinplot(spam~logChar4+logcapsum, data=spamdata,
xlab="Log char4",
ylab="Log cap sum", colramp=rf)
smoothScatter(logChar4~logcapsum, data=spamdata,
col=spam+1)
smoothScatter(spamdata$logChar4, spamdata$logcapsum)
smoothScatter(spamdata$logChar4[spamdata$spam==1,],
spamdata$logcapsum[spamdata$spam==1,])
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colorRampPalette(c("white", reds9)), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colorRampPalette(c("white", "reds9")), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colorRampPalette(c("white", "red")), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colorRampPalette(brewer.pal(10,"YlOrRd")), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colorRampPalette(brewer.pal(10,"YlOrRd")))
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colorRampPalette(brewer.pal(9,"YlOrRd")))
table(spamdata$spam)
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(brewer.pal(9,"YlOrRd")))
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(c("white", brewer.pal(9,"YlOrRd")), add=T)
)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(c("white", brewer.pal(9,"YlOrRd"))), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(c("transparent", brewer.pal(9,"YlOrRd")), alpha=100), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(c("transparent", brewer.pal(9,"YlOrRd")),
alpha=0.5), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(c("transparent", brewer.pal(9,"YlOrRd")),
alpha=200), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
smoothScatter(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
colramp=colorRampPalette(c("transparent", brewer.pal(9,"YlOrRd")),
alpha=125), add=T)
smoothScatter(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1])
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=2)
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white", gray.colors(9))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=4)
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=2)
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white", gray.colors(n, start = 0.3, end = 0.9))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=4)
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=2)
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white", gray.colors(10, start = 0.3, end = 0.9))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=4)
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=2)
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.9, end = 0.3))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=4)
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=2)
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.8, end = 0.2))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=4)
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=2)
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.8, end = 0.2))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=col=rgb(1,0,0,alpha=125))
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=rgb(0,0,1,alpha=125))
legend(1, 7, c("spam", "not spam"), pch=1, col=c(2,4))
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.8, end = 0.2))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=col=rgb(1,0,0,alpha=0.5))
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=rgb(0,0,1,alpha=0.5))
legend(1, 7, c("spam", "not spam"), pch=1, col=c(2,4))
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.8, end = 0.2))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=rgb(1,0,0,alpha=0.5))
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=rgb(0,0,1,alpha=0.5))
legend(1, 7, c("spam", "not spam"), pch=1, col=c(2,4))
legend(2, 8.5, c("spam", "not spam"), pch=1, col=c(2,4))
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.8, end = 0.2))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=rgb(1,0,0,alpha=1))
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=rgb(0,0,1,alpha=0.3))
legend(2, 8.5, c("spam", "not spam"), pch=1, col=c(2,4))
smoothScatter(spamdata$logChar4,
spamdata$logcapsum,
colramp = colorRampPalette(c("white",
gray.colors(10, start = 0.8, end = 0.2))))
points(spamdata$logChar4[spamdata$spam==1],
spamdata$logcapsum[spamdata$spam==1],
col=rgb(1,0,0,alpha=0.4))
points(spamdata$logChar4[spamdata$spam==0],
spamdata$logcapsum[spamdata$spam==0],
col=rgb(0,0,1,alpha=0.8))
legend(2, 8.5, c("spam", "not spam"), pch=1, col=c(2,4))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
